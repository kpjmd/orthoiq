import { NextRequest, NextResponse } from 'next/server';
import { createShare } from '../../../lib/database';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { 
      question, 
      response, 
      metadata 
    } = body;

    if (!question || !response) {
      return NextResponse.json(
        { error: 'Question and response are required' },
        { status: 400 }
      );
    }

    // Store share data in database first
    const shareId = await createShare(
      'artwork',
      question,
      response,
      95, // Default confidence for artwork shares
      metadata || {},
      {}, // Will update farcaster data after getting share URL
      30 // Expire in 30 days
    );

    // Create clean share URL
    const shareUrl = `${process.env.NEXT_PUBLIC_BASE_URL || 'https://orthoiq.vercel.app'}/share/${shareId}`;
    
    // Generate Farcaster-optimized sharing data with share URL
    const farcasterData = {
      text: `ðŸŽ¨ Check out this unique medical artwork generated by AI!\n\n"${question.substring(0, 120)}${question.length > 120 ? '...' : ''}"\n\n${metadata ? `ðŸ§¬ ${metadata.subspecialty} | ðŸŽ¯ ${metadata.emotionalTone} | âš¡ ${metadata.complexityLevel}/10` : ''}`,
      embeds: [{
        url: shareUrl,
        metadata: {
          image: `${process.env.NEXT_PUBLIC_BASE_URL || 'https://orthoiq.vercel.app'}/api/og-image?shareId=${shareId}`
        }
      }]
    };

    return NextResponse.json({
      success: true,
      shareId,
      shareUrl,
      farcasterData,
      metadata: {
        question: question.substring(0, 200),
        response: response.substring(0, 300),
        artwork: metadata || {},
        timestamp: new Date().toISOString()
      }
    }, { status: 200 });

  } catch (error) {
    console.error('Error creating artwork share:', error);
    return NextResponse.json(
      { error: 'Failed to create share link' },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const shareId = searchParams.get('id');
    
    if (!shareId) {
      return NextResponse.json(
        { error: 'Share ID is required' },
        { status: 400 }
      );
    }

    // Import getShare here to avoid issues with module resolution
    const { getShare } = await import('../../../lib/database');
    const shareData = await getShare(shareId);

    if (!shareData) {
      return NextResponse.json(
        { error: 'Share not found or expired' },
        { status: 404 }
      );
    }

    return NextResponse.json({
      success: true,
      shareData
    }, { status: 200 });

  } catch (error) {
    console.error('Error retrieving artwork share:', error);
    return NextResponse.json(
      { error: 'Failed to retrieve share data' },
      { status: 500 }
    );
  }
}